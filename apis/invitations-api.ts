/* tslint:disable */
/* eslint-disable */
/**
 * Screenrights Permissions API
 * The Screenrights Permissions API documentation.
 *
 * The version of the OpenAPI document: 0.0.0-dev.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AcceptInvitationDto } from '../models';
// @ts-ignore
import { CreateInvitationDto } from '../models';
// @ts-ignore
import { ErrorResponse } from '../models';
// @ts-ignore
import { Invitation } from '../models';
// @ts-ignore
import { PaginatedInvitationsDto } from '../models';
// @ts-ignore
import { UpdateInvitationDto } from '../models';
/**
 * InvitationsApi - axios parameter creator
 * @export
 */
export const InvitationsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Accept the invitation
         * @summary 
         * @param {AcceptInvitationDto} acceptInvitationDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        invitationControllerAcceptInvitation: async (acceptInvitationDto: AcceptInvitationDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'acceptInvitationDto' is not null or undefined
            assertParamExists('invitationControllerAcceptInvitation', 'acceptInvitationDto', acceptInvitationDto)
            const localVarPath = `/invitation/accept`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(acceptInvitationDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create and send a new invitation.
         * @summary 
         * @param {CreateInvitationDto} createInvitationDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        invitationControllerCreate: async (createInvitationDto: CreateInvitationDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createInvitationDto' is not null or undefined
            assertParamExists('invitationControllerCreate', 'createInvitationDto', createInvitationDto)
            const localVarPath = `/invitation`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createInvitationDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} workspaceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        invitationControllerFindAll: async (workspaceId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists('invitationControllerFindAll', 'workspaceId', workspaceId)
            const localVarPath = `/invitation`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (workspaceId !== undefined) {
                localVarQueryParameter['workspaceId'] = workspaceId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} workspaceId 
         * @param {number} [page] The page number to retrieve, default &#x3D; 1
         * @param {number} [pageSize] Number of items to include per page, default &#x3D; 10
         * @param {string} [sortBy] The properties and order items should be sorted, default &#x3D; \&quot;created:asc\&quot;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        invitationControllerFindAllV2: async (workspaceId: string, page?: number, pageSize?: number, sortBy?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists('invitationControllerFindAllV2', 'workspaceId', workspaceId)
            const localVarPath = `/v2/invitation`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (workspaceId !== undefined) {
                localVarQueryParameter['workspaceId'] = workspaceId;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sortBy'] = sortBy;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get invitation by Id.
         * @summary 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        invitationControllerFindOne: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('invitationControllerFindOne', 'id', id)
            const localVarPath = `/invitation/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete an invitation by Id.
         * @summary 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        invitationControllerRemove: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('invitationControllerRemove', 'id', id)
            const localVarPath = `/invitation/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Resend an invitation.
         * @summary 
         * @param {string} id 
         * @param {UpdateInvitationDto} updateInvitationDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        invitationControllerResend: async (id: string, updateInvitationDto: UpdateInvitationDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('invitationControllerResend', 'id', id)
            // verify required parameter 'updateInvitationDto' is not null or undefined
            assertParamExists('invitationControllerResend', 'updateInvitationDto', updateInvitationDto)
            const localVarPath = `/invitation/{id}/resend`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateInvitationDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update an existing invitation.
         * @summary 
         * @param {string} id 
         * @param {UpdateInvitationDto} updateInvitationDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        invitationControllerUpdate: async (id: string, updateInvitationDto: UpdateInvitationDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('invitationControllerUpdate', 'id', id)
            // verify required parameter 'updateInvitationDto' is not null or undefined
            assertParamExists('invitationControllerUpdate', 'updateInvitationDto', updateInvitationDto)
            const localVarPath = `/invitation/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateInvitationDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Verify the invitation code.
         * @summary 
         * @param {string} code 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        invitationControllerVerifyOne: async (code: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            assertParamExists('invitationControllerVerifyOne', 'code', code)
            const localVarPath = `/invitation/verify`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (code !== undefined) {
                localVarQueryParameter['code'] = code;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * InvitationsApi - functional programming interface
 * @export
 */
export const InvitationsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = InvitationsApiAxiosParamCreator(configuration)
    return {
        /**
         * Accept the invitation
         * @summary 
         * @param {AcceptInvitationDto} acceptInvitationDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async invitationControllerAcceptInvitation(acceptInvitationDto: AcceptInvitationDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Invitation>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.invitationControllerAcceptInvitation(acceptInvitationDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create and send a new invitation.
         * @summary 
         * @param {CreateInvitationDto} createInvitationDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async invitationControllerCreate(createInvitationDto: CreateInvitationDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Invitation>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.invitationControllerCreate(createInvitationDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} workspaceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async invitationControllerFindAll(workspaceId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.invitationControllerFindAll(workspaceId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} workspaceId 
         * @param {number} [page] The page number to retrieve, default &#x3D; 1
         * @param {number} [pageSize] Number of items to include per page, default &#x3D; 10
         * @param {string} [sortBy] The properties and order items should be sorted, default &#x3D; \&quot;created:asc\&quot;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async invitationControllerFindAllV2(workspaceId: string, page?: number, pageSize?: number, sortBy?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedInvitationsDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.invitationControllerFindAllV2(workspaceId, page, pageSize, sortBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get invitation by Id.
         * @summary 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async invitationControllerFindOne(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Invitation>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.invitationControllerFindOne(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete an invitation by Id.
         * @summary 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async invitationControllerRemove(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Invitation>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.invitationControllerRemove(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Resend an invitation.
         * @summary 
         * @param {string} id 
         * @param {UpdateInvitationDto} updateInvitationDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async invitationControllerResend(id: string, updateInvitationDto: UpdateInvitationDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Invitation>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.invitationControllerResend(id, updateInvitationDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update an existing invitation.
         * @summary 
         * @param {string} id 
         * @param {UpdateInvitationDto} updateInvitationDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async invitationControllerUpdate(id: string, updateInvitationDto: UpdateInvitationDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Invitation>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.invitationControllerUpdate(id, updateInvitationDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Verify the invitation code.
         * @summary 
         * @param {string} code 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async invitationControllerVerifyOne(code: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Invitation>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.invitationControllerVerifyOne(code, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * InvitationsApi - factory interface
 * @export
 */
export const InvitationsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = InvitationsApiFp(configuration)
    return {
        /**
         * Accept the invitation
         * @summary 
         * @param {AcceptInvitationDto} acceptInvitationDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        invitationControllerAcceptInvitation(acceptInvitationDto: AcceptInvitationDto, options?: any): AxiosPromise<Invitation> {
            return localVarFp.invitationControllerAcceptInvitation(acceptInvitationDto, options).then((request) => request(axios, basePath));
        },
        /**
         * Create and send a new invitation.
         * @summary 
         * @param {CreateInvitationDto} createInvitationDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        invitationControllerCreate(createInvitationDto: CreateInvitationDto, options?: any): AxiosPromise<Invitation> {
            return localVarFp.invitationControllerCreate(createInvitationDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} workspaceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        invitationControllerFindAll(workspaceId: string, options?: any): AxiosPromise<void> {
            return localVarFp.invitationControllerFindAll(workspaceId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} workspaceId 
         * @param {number} [page] The page number to retrieve, default &#x3D; 1
         * @param {number} [pageSize] Number of items to include per page, default &#x3D; 10
         * @param {string} [sortBy] The properties and order items should be sorted, default &#x3D; \&quot;created:asc\&quot;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        invitationControllerFindAllV2(workspaceId: string, page?: number, pageSize?: number, sortBy?: string, options?: any): AxiosPromise<PaginatedInvitationsDto> {
            return localVarFp.invitationControllerFindAllV2(workspaceId, page, pageSize, sortBy, options).then((request) => request(axios, basePath));
        },
        /**
         * Get invitation by Id.
         * @summary 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        invitationControllerFindOne(id: string, options?: any): AxiosPromise<Invitation> {
            return localVarFp.invitationControllerFindOne(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete an invitation by Id.
         * @summary 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        invitationControllerRemove(id: string, options?: any): AxiosPromise<Invitation> {
            return localVarFp.invitationControllerRemove(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Resend an invitation.
         * @summary 
         * @param {string} id 
         * @param {UpdateInvitationDto} updateInvitationDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        invitationControllerResend(id: string, updateInvitationDto: UpdateInvitationDto, options?: any): AxiosPromise<Invitation> {
            return localVarFp.invitationControllerResend(id, updateInvitationDto, options).then((request) => request(axios, basePath));
        },
        /**
         * Update an existing invitation.
         * @summary 
         * @param {string} id 
         * @param {UpdateInvitationDto} updateInvitationDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        invitationControllerUpdate(id: string, updateInvitationDto: UpdateInvitationDto, options?: any): AxiosPromise<Invitation> {
            return localVarFp.invitationControllerUpdate(id, updateInvitationDto, options).then((request) => request(axios, basePath));
        },
        /**
         * Verify the invitation code.
         * @summary 
         * @param {string} code 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        invitationControllerVerifyOne(code: string, options?: any): AxiosPromise<Invitation> {
            return localVarFp.invitationControllerVerifyOne(code, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * InvitationsApi - object-oriented interface
 * @export
 * @class InvitationsApi
 * @extends {BaseAPI}
 */
export class InvitationsApi extends BaseAPI {
    /**
     * Accept the invitation
     * @summary 
     * @param {AcceptInvitationDto} acceptInvitationDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvitationsApi
     */
    public invitationControllerAcceptInvitation(acceptInvitationDto: AcceptInvitationDto, options?: AxiosRequestConfig) {
        return InvitationsApiFp(this.configuration).invitationControllerAcceptInvitation(acceptInvitationDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create and send a new invitation.
     * @summary 
     * @param {CreateInvitationDto} createInvitationDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvitationsApi
     */
    public invitationControllerCreate(createInvitationDto: CreateInvitationDto, options?: AxiosRequestConfig) {
        return InvitationsApiFp(this.configuration).invitationControllerCreate(createInvitationDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} workspaceId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvitationsApi
     */
    public invitationControllerFindAll(workspaceId: string, options?: AxiosRequestConfig) {
        return InvitationsApiFp(this.configuration).invitationControllerFindAll(workspaceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} workspaceId 
     * @param {number} [page] The page number to retrieve, default &#x3D; 1
     * @param {number} [pageSize] Number of items to include per page, default &#x3D; 10
     * @param {string} [sortBy] The properties and order items should be sorted, default &#x3D; \&quot;created:asc\&quot;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvitationsApi
     */
    public invitationControllerFindAllV2(workspaceId: string, page?: number, pageSize?: number, sortBy?: string, options?: AxiosRequestConfig) {
        return InvitationsApiFp(this.configuration).invitationControllerFindAllV2(workspaceId, page, pageSize, sortBy, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get invitation by Id.
     * @summary 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvitationsApi
     */
    public invitationControllerFindOne(id: string, options?: AxiosRequestConfig) {
        return InvitationsApiFp(this.configuration).invitationControllerFindOne(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete an invitation by Id.
     * @summary 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvitationsApi
     */
    public invitationControllerRemove(id: string, options?: AxiosRequestConfig) {
        return InvitationsApiFp(this.configuration).invitationControllerRemove(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Resend an invitation.
     * @summary 
     * @param {string} id 
     * @param {UpdateInvitationDto} updateInvitationDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvitationsApi
     */
    public invitationControllerResend(id: string, updateInvitationDto: UpdateInvitationDto, options?: AxiosRequestConfig) {
        return InvitationsApiFp(this.configuration).invitationControllerResend(id, updateInvitationDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update an existing invitation.
     * @summary 
     * @param {string} id 
     * @param {UpdateInvitationDto} updateInvitationDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvitationsApi
     */
    public invitationControllerUpdate(id: string, updateInvitationDto: UpdateInvitationDto, options?: AxiosRequestConfig) {
        return InvitationsApiFp(this.configuration).invitationControllerUpdate(id, updateInvitationDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Verify the invitation code.
     * @summary 
     * @param {string} code 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvitationsApi
     */
    public invitationControllerVerifyOne(code: string, options?: AxiosRequestConfig) {
        return InvitationsApiFp(this.configuration).invitationControllerVerifyOne(code, options).then((request) => request(this.axios, this.basePath));
    }
}
