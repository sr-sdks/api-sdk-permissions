/* tslint:disable */
/* eslint-disable */
/**
 * Screenrights Permissions API
 * The Screenrights Permissions API documentation.
 *
 * The version of the OpenAPI document: 0.0.0-dev.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CreatePermissionDto } from '../models';
// @ts-ignore
import { ErrorResponse } from '../models';
// @ts-ignore
import { Permission } from '../models';
// @ts-ignore
import { UpdatePermissionDto } from '../models';
/**
 * PermissionsApi - axios parameter creator
 * @export
 */
export const PermissionsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a new permission.
         * @summary 
         * @param {CreatePermissionDto} createPermissionDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        permissionsControllerCreate: async (createPermissionDto: CreatePermissionDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createPermissionDto' is not null or undefined
            assertParamExists('permissionsControllerCreate', 'createPermissionDto', createPermissionDto)
            const localVarPath = `/permission`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createPermissionDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all permissions.
         * @summary 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        permissionsControllerFindAll: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/permission`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get permission by Key.
         * @summary 
         * @param {string} key 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        permissionsControllerFindOne: async (key: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'key' is not null or undefined
            assertParamExists('permissionsControllerFindOne', 'key', key)
            const localVarPath = `/permission/{key}`
                .replace(`{${"key"}}`, encodeURIComponent(String(key)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete permission by Key.
         * @summary 
         * @param {string} key 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        permissionsControllerRemove: async (key: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'key' is not null or undefined
            assertParamExists('permissionsControllerRemove', 'key', key)
            const localVarPath = `/permission/{key}`
                .replace(`{${"key"}}`, encodeURIComponent(String(key)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update an existing permission.
         * @summary 
         * @param {string} key 
         * @param {UpdatePermissionDto} updatePermissionDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        permissionsControllerUpdate: async (key: string, updatePermissionDto: UpdatePermissionDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'key' is not null or undefined
            assertParamExists('permissionsControllerUpdate', 'key', key)
            // verify required parameter 'updatePermissionDto' is not null or undefined
            assertParamExists('permissionsControllerUpdate', 'updatePermissionDto', updatePermissionDto)
            const localVarPath = `/permission/{key}`
                .replace(`{${"key"}}`, encodeURIComponent(String(key)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updatePermissionDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PermissionsApi - functional programming interface
 * @export
 */
export const PermissionsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PermissionsApiAxiosParamCreator(configuration)
    return {
        /**
         * Create a new permission.
         * @summary 
         * @param {CreatePermissionDto} createPermissionDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async permissionsControllerCreate(createPermissionDto: CreatePermissionDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Permission>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.permissionsControllerCreate(createPermissionDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get all permissions.
         * @summary 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async permissionsControllerFindAll(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Permission>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.permissionsControllerFindAll(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get permission by Key.
         * @summary 
         * @param {string} key 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async permissionsControllerFindOne(key: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Permission>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.permissionsControllerFindOne(key, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete permission by Key.
         * @summary 
         * @param {string} key 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async permissionsControllerRemove(key: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.permissionsControllerRemove(key, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update an existing permission.
         * @summary 
         * @param {string} key 
         * @param {UpdatePermissionDto} updatePermissionDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async permissionsControllerUpdate(key: string, updatePermissionDto: UpdatePermissionDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Permission>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.permissionsControllerUpdate(key, updatePermissionDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PermissionsApi - factory interface
 * @export
 */
export const PermissionsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PermissionsApiFp(configuration)
    return {
        /**
         * Create a new permission.
         * @summary 
         * @param {CreatePermissionDto} createPermissionDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        permissionsControllerCreate(createPermissionDto: CreatePermissionDto, options?: any): AxiosPromise<Permission> {
            return localVarFp.permissionsControllerCreate(createPermissionDto, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all permissions.
         * @summary 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        permissionsControllerFindAll(options?: any): AxiosPromise<Array<Permission>> {
            return localVarFp.permissionsControllerFindAll(options).then((request) => request(axios, basePath));
        },
        /**
         * Get permission by Key.
         * @summary 
         * @param {string} key 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        permissionsControllerFindOne(key: string, options?: any): AxiosPromise<Permission> {
            return localVarFp.permissionsControllerFindOne(key, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete permission by Key.
         * @summary 
         * @param {string} key 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        permissionsControllerRemove(key: string, options?: any): AxiosPromise<void> {
            return localVarFp.permissionsControllerRemove(key, options).then((request) => request(axios, basePath));
        },
        /**
         * Update an existing permission.
         * @summary 
         * @param {string} key 
         * @param {UpdatePermissionDto} updatePermissionDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        permissionsControllerUpdate(key: string, updatePermissionDto: UpdatePermissionDto, options?: any): AxiosPromise<Permission> {
            return localVarFp.permissionsControllerUpdate(key, updatePermissionDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PermissionsApi - object-oriented interface
 * @export
 * @class PermissionsApi
 * @extends {BaseAPI}
 */
export class PermissionsApi extends BaseAPI {
    /**
     * Create a new permission.
     * @summary 
     * @param {CreatePermissionDto} createPermissionDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PermissionsApi
     */
    public permissionsControllerCreate(createPermissionDto: CreatePermissionDto, options?: AxiosRequestConfig) {
        return PermissionsApiFp(this.configuration).permissionsControllerCreate(createPermissionDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get all permissions.
     * @summary 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PermissionsApi
     */
    public permissionsControllerFindAll(options?: AxiosRequestConfig) {
        return PermissionsApiFp(this.configuration).permissionsControllerFindAll(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get permission by Key.
     * @summary 
     * @param {string} key 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PermissionsApi
     */
    public permissionsControllerFindOne(key: string, options?: AxiosRequestConfig) {
        return PermissionsApiFp(this.configuration).permissionsControllerFindOne(key, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete permission by Key.
     * @summary 
     * @param {string} key 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PermissionsApi
     */
    public permissionsControllerRemove(key: string, options?: AxiosRequestConfig) {
        return PermissionsApiFp(this.configuration).permissionsControllerRemove(key, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update an existing permission.
     * @summary 
     * @param {string} key 
     * @param {UpdatePermissionDto} updatePermissionDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PermissionsApi
     */
    public permissionsControllerUpdate(key: string, updatePermissionDto: UpdatePermissionDto, options?: AxiosRequestConfig) {
        return PermissionsApiFp(this.configuration).permissionsControllerUpdate(key, updatePermissionDto, options).then((request) => request(this.axios, this.basePath));
    }
}
